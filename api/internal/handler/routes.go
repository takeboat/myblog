// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0

package handler

import (
	"net/http"

	category "blog/api/internal/handler/category"
	post "blog/api/internal/handler/post"
	public "blog/api/internal/handler/public"
	tag "blog/api/internal/handler/tag"
	user "blog/api/internal/handler/user"
	"blog/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/category/create",
				Handler: category.CreateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/category/delete",
				Handler: category.DeleteCategoryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/post/create",
				Handler: post.CreatePostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/post/delete",
				Handler: post.DeletePostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/post/update",
				Handler: post.UpdatePostHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/category/list",
				Handler: public.ListCategoriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/post/detail",
				Handler: public.PostDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/post/list",
				Handler: public.ListPostsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/tag/list",
				Handler: public.ListTagsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/info",
				Handler: public.InfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/user/login",
				Handler: public.LoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/tag/create",
				Handler: tag.CreateTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/tag/delete",
				Handler: tag.DeleteTagHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/user/update",
				Handler: user.UpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
